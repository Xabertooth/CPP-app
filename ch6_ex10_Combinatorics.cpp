#include "std_lib_facilities.h"
//-----------------------------------------------------------
//Определение 1: Перестановкой множества из n элементов называется расположение элементов в определенном порядке. 
//				Pn = n!
//Определение 2: Размещениями множества из n различных элементов по m элементов (m\le n) называются комбинации, которые составлены
//               из данных n элементов по m> элементов и отличаются либо самими элементами, либо порядком элементов. 
//				А(n,m) = n!/(n-m)!
//Определение 3: Сочетаниями из n различных элементов по k элементов называются комбинации, которые составлены из данных n элементов
//			     по k элементов и отличаются хотя бы одним элементом (иначе говоря, k-элементные подмножества данного множества из n элементов).
//				C(k,n) = n!/k!(n-k)!
//-----------------------------------------------------------
double factorial(double x){ //функция для вычисления факториала
	if (x == 0) return 1;
	double i = x;
	--i;
	while(i > 0){
		x *= i;
		--i;
	}
	return x;
}
//-----------------------------------------------------------

//-----------------------------------------------------------
double accommodation(int n, int m){ //Вычисление размещения по формуле: А(n,m) = n!/(n-m)!
	double nf = factorial(n); //вычисление факториаля числа а
	double mf = n-m;
	mf = factorial(mf);
	double acc = nf/mf;
	return acc;
}
//-----------------------------------------------------------

//-----------------------------------------------------------
double combination(int A, int k){ //Вычисление сочетания по формуле:  C(k,n) = n!/k!(n-k)! или С(k,n) = A(k,n)/n!
	double fk = factorial(k);
	double cmb = A / fk;
	return cmb;
}
//-----------------------------------------------------------

//-----------------------------------------------------------
int main() 
try
{
	cout << "Для вычисления ПЕРЕСТАНОВКИ введите 'p',\n"
		 << "для вычисления СОЧЕТАНИЯ введите 'c',\n"
		 << "для вычисления РАЗМЕЩЕНИЯ введите 'a'.\n";
	cin.clear();
	char cho; //переменная выбора операции
	cin >> cho;
	switch (cho){
		case 'p': case 'P':
		{
			cout << "Перестановкой множества из n элементов называется\n"
				 << "расположение элементов в определенном порядке. Pn = n!\n"
				 << "\nВведите количество элементов(n)!\n";	 
			double n, pn;
			cin >> n;
			pn = factorial(n);
			cout << "Число перестановок из " << n << " элементов равно " << pn << '!' << endl;
			break;
		}
		case 'c': case 'C':
		{
			cout << "Сочетаниями из n различных элементов по k элементов\n"
				 << "называются комбинации, которые составлены из данных n элементов\n"
				 << "по k элементов и отличаются хотя бы одним элементом\n"
				 << "(иначе говоря, k-элементные подмножества данного множества из n элементов).\n"
				 << "C(k,n) = n!/k!(n-k)!\n"
				 << "\nВведите значение 'n' !\n";
			int n;
			cin >> n;
			cout << "Введите значение 'k', причём k < n! \n";
			int k;
			cin >> k;
			if(k > n) error("недопустимое условие: k > n!");
			double ac = accommodation(n, k); //для удобства вычисления сочетаний, сначала вычислим размещения.
			double comb = combination(ac, k);
			cout << "Число сочетаний из " << n << " элементов по " << k << " равно " << comb << '!' << endl;
			break;
		}
		case 'a': case 'A':
		{
			cout << "Размещениями множества из n различных элементов по m элементов\n"
				 << "называются комбинации, которые составлены из данных n элементов по m элементов\n"
				 << "и отличаются либо самими элементами, либо порядком элементов.\n"
				 << "А(n,m) = n!/(n-m)!\n"
				 << "\nВведите значение 'n' !\n";
			int n;
			cin >> n;
			cout << "\nВведите значение 'm' причём m < n! \n";
			int m;
			cin >> m;
			if(m > n) error("недопустимое условие: m > n!");
			double ac = accommodation(n, m);
			cout << "Размещение из " << n << " элементов по " << m << " равно " << ac << '!' << endl;
			break;
		}
		default:
			error("Выбрана несуществующая команда!");
	}
	keep_window_open();
}

catch (exception& e) {
    cerr << "error: " << e.what() << '\n'; 
	keep_window_open();
    return 1;
}

catch (...) {
    cerr << "Oops: unknown exception!\n"; 
	keep_window_open();
    return 2;
}
//-----------------------------------------------------------
